{"version":3,"sources":["components/SearchBar/index.js","components/CurrentTemp/index.js","components/FutureDayForecast/index.js","components/SidebarWrapper/index.js","components/SearchErrorMessage/index.js","components/PreContentMessage/index.js","App.js","index.js"],"names":["SearchBar","searchValue","submitSearch","className","id","type","placeholder","ref","onClick","href","target","rel","CurrentTemp","unsplashResult","displayCurrentForecast","openWeatherResults","containerStyling","borderRadius","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","boxShadow","style","name","date","icon","src","alt","description","temperature","maxTemperature","minTemperature","humidity","FutureDayForecast","SidebarWrapper","children","SearchErrorMessage","role","aria-label","App","useRef","useState","setUnsplashResult","setOpenWeatherResults","futureForecast","setFutureForecast","setDisplayCurrentForecast","displayFutureForecast","setDisplayFutureForecast","preContent","setPreContent","apiErr","setApiErr","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","getMonth","getDate","forecastResultsArray","forecastCardRender","event","preventDefault","unsplashUrl","current","value","process","axios","get","then","res","imageArray","data","results","randomImage","Math","floor","random","length","urls","regular","catch","err","console","log","openWeatherUrl","weather","dt","main","temp","temp_max","temp_min","windSpeed","wind","speed","latitude","coord","lat","longitude","lon","openWeatherForecastUrl","i","push","forEach","e","key","processForecast","list","PreContentMessage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e986763.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\nimport { FaGithub } from 'react-icons/fa';\n\nfunction SearchBar({searchValue, submitSearch}) {\n\n    return (\n        <header className=\"search-bar__header\">\n            <div className=\"columns\">\n                <div className=\"column is-8\">\n                    <div className=\"field has-addons\">\n                        <div className=\"control is-expanded\">\n                            <input\n                                id=\"citySearch\"\n                                className=\"input\"\n                                type=\"text\"\n                                placeholder=\"Search a location…\"\n                                ref={searchValue}\n                            />\n                        </div>\n                        <div className=\"control\">\n                            <button\n                                id=\"citySubmit\"\n                                type=\"submit\"\n                                className=\"button g__full-percent-height search-bar__btn\"\n                                onClick={submitSearch}>\n                                Search\n                        </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"column search-bar__github-container\">\n                    <a\n                        href=\"https://github.com/GedalyaKrycer/weather-forecaster\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"search-bar__github\">\n                        <FaGithub />\n                        View Repo\n                    </a>\n                </div>\n            </div>\n\n        </header>\n    );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './style.css';\n\n\nfunction CurrentTemp({\n    unsplashResult,\n    displayCurrentForecast,\n    openWeatherResults\n}) {\n\n\n    // This adds styling for a API generated background image\n    const containerStyling = {\n        borderRadius: \"5px\",\n        backgroundImage: `linear-gradient(0deg, rgba(98, 4, 126, 0.9), rgba(233, 146, 6, 0.9)), url(${unsplashResult})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: \"cover\",\n        backgroundPosition: \"bottom\",\n        boxShadow: \"0px 2px 4px rgb(0 0 0 / 0.25)\"\n    }\n\n    // If there is no data this does not display the current temp code.\n    if (displayCurrentForecast === false) {\n        return null;\n    }\n\n\n    return (\n        <div\n            className=\"current-temp__container\"\n            style={containerStyling}>\n            <div className=\"current-temp__header\">\n\n                <h2>{openWeatherResults.name}</h2>\n\n                <div className=\"current-temp__meta\">\n                    <p className=\"current-temp__meta-date\">{openWeatherResults.date}</p>\n                    <div className=\"current-temp__meta-status\">\n                        {!openWeatherResults.icon ? null : <img src={`https://openweathermap.org/img/wn/${openWeatherResults.icon}.png`} alt=\"Weather status icon\"\n                            className=\"g__temp-status-img\" />}\n\n                        <p>{openWeatherResults.description}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"columns current-temp__details-container\">\n                <div className=\"column current-temp__blur\">\n                    <h3 className=\"g__details-num\">{openWeatherResults.temperature}<sup className=\"g__details-metric\">°F</sup></h3>\n                    <p className=\"g__details-label\">Current</p>\n                </div>\n                <div className=\"column current-temp__blur\">\n                    <h3 className=\"g__details-num\">{openWeatherResults.maxTemperature}<sup className=\"g__details-metric\">°F</sup></h3>\n                    <p className=\"g__details-label\">High +</p>\n                </div>\n                <div className=\"column current-temp__blur\">\n                    <h3 className=\"g__details-num\">{openWeatherResults.minTemperature}<sup className=\"g__details-metric\">°F</sup></h3>\n                    <p className=\"g__details-label\">Low –</p>\n                </div>\n                <div className=\"column current-temp__blur\">\n                    <h3 className=\"g__details-num\">{openWeatherResults.humidity}<sup className=\"g__details-metric\">%</sup></h3>\n                    <p className=\"g__details-label\">Humidity</p>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default CurrentTemp;\n","import React from 'react';\nimport './style.css';\n\nfunction FutureDayForecast({\n    icon,\n    description,\n    date,\n    temperature,\n    humidity\n}) {\n\n    return (\n            \n                <div className=\"column\">\n                    <div className=\"forecast__container\">\n                        <div className=\"forecast__header\">\n                            <h5>{date}</h5>\n                        </div>\n                        <div className=\"forecast__body\">\n                            <img\n                                src={`https://openweathermap.org/img/wn/${icon}.png`}\n                                alt=\"Weather status icon\"\n                                className=\"g__temp-status-img\" />\n                            <p>{description}</p>\n\n                            <div className=\"forecast__meta-container\">\n                                <h3 className=\"g__details-num\">{temperature}<sup className=\"g__details-metric\">°F</sup></h3>\n                                <p className=\"g__details-label\">Temperature</p>\n                            </div>\n\n                            <div className=\"forecast__meta-container\">\n                                <h3 className=\"g__details-num\">{humidity}<sup className=\"g__details-metric\">%</sup></h3>\n                                <p className=\"g__details-label\">Humidity</p>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n\n\n\n    )\n}\n\nexport default FutureDayForecast;\n","import React from 'react';\nimport './style.css';\n\nfunction SidebarWrapper({children}) {\n    return (\n        <div>\n            \n            <h1 className=\"side-bar__logo\">\n            <span className=\"sidebar__logo--one\">React</span> \n            <span className=\"sidebar__logo--two\">Weather</span>\n            <span className=\"sidebar__logo--three\">Forecast</span>\n            </h1>\n\n            {children}\n\n        </div>\n    )\n}\n\nexport default SidebarWrapper;\n","import React from 'react';\nimport './style.css';\n\nfunction SearchErrorMessage() {\n\n    return (\n        <div className=\"search-error__container\">\n            <h1 className=\"search-error__title\">Uh oh <span role=\"img\" aria-label=\"Thinking\">🤔</span></h1>\n            <p className=\"search-error__msg\">Please make sure your city or country is spelled correctly and then try your search again.</p>\n        </div>\n    )\n}\n\nexport default SearchErrorMessage;\n","import React from 'react';\nimport './style.css';\n\nfunction SearchErrorMessage() {\n\n    return (\n        <div className=\"pre-content__container\">\n            <h1 className=\"pre-content__title\">Welcome!</h1>\n            <p className=\"pre-content__msg\">Search for a city, state or country to see the current weather and 5-day forecast.</p>\n        </div>\n    )\n}\n\nexport default SearchErrorMessage;\n","import React, { useState, useRef } from 'react';\nimport SearchBar from './components/SearchBar';\nimport CurrentTemp from './components/CurrentTemp';\nimport FutureDayForecast from './components/FutureDayForecast';\n// import LocationHistory from './components/LocationHistory';\nimport SidebarWrapper from './components/SidebarWrapper';\nimport SearchErrorMessage from './components/SearchErrorMessage';\nimport PreContentMessage from './components/PreContentMessage';\nimport axios from 'axios';\n\nfunction App() {\n\n  // Stores the input from search\n  const searchValue = useRef()\n\n  // Stores url from Unsplash\n  const [unsplashResult, setUnsplashResult] = useState();\n\n  // Stores an object of data from Open Weather\n  const [openWeatherResults, setOpenWeatherResults] = useState({});\n\n  // Stores an Array of data from Open Weather\n  const [futureForecast, setFutureForecast] = useState();\n\n  // Stores boolean if the current forecast should display\n  const [displayCurrentForecast, setDisplayCurrentForecast] = useState(false);\n\n  // Stores boolean if the future forecast should display\n  const [displayFutureForecast, setDisplayFutureForecast] = useState(false);\n\n\n \n\n  // Stores boolean if the pre content message should display\n  const [preContent, setPreContent] = useState(true);\n\n\n  // Stores boolean for if there is an API error. If so it triggers a front end alert\n  const [apiErr, setApiErr] = useState(false);\n\n\n  // Converts the Open Weather time unix code into a readable date\n  function timeConverter(UNIX_timestamp) {\n    const a = new Date(UNIX_timestamp * 1000);\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const time = month + ' / ' + date + ' / ' + year;\n    return time;\n  };\n\n  // START Process Forcast Array ----------------------------------|\n\n  // Holds the 5 forecast data objects from the API that we want to display.\n  const forecastResultsArray = []\n\n  // Holds the rendered components that have the 5 forecast object data\n  const forecastCardRender = []\n\n  // Filters the 40 objects to just 5, one for each day.\n  function processForecast(event) {\n    for (let i = 2; i < 35; i += 8) {\n      forecastResultsArray.push(event[i]);\n    }\n\n    // Takes the 5 objects and creates 5 components with props\n    forecastResultsArray.forEach((e) => {\n      forecastCardRender.push(\n        <FutureDayForecast\n          displayFutureForecast={displayFutureForecast}\n          key={e.dt}\n          icon={e.weather[0].icon}\n          description={e.weather[0].description}\n          date={timeConverter(e.dt)}\n          temperature={Math.floor(e.main.temp)}\n          humidity={Math.floor(e.main.humidity)}\n        />\n      \n      );\n    });\n\n    // Sets the 5 components to state so they can be rendered on the page\n    setFutureForecast(forecastCardRender)\n\n    // Lets the page know to show certain JSX elements \n    setDisplayFutureForecast(true);\n  }\n  // END Process Forcast Array ----------------------------------|\n\n\n  // START API Calls ---------------------------------------|\n  const submitSearch = (event) => {\n    event.preventDefault();\n\n    // Unsplash Image API\n    const unsplashUrl = `https://api.unsplash.com/search/photos?page=1&query=${searchValue.current.value}&client_id=${process.env.REACT_APP_UNSPLASH_KEY}`;\n\n    axios.get(unsplashUrl)\n      .then((res) => {\n        \n        // Saves response of urls into an array \n        const imageArray = res.data.results;\n\n        // Selects a random image from array\n        const randomImage = imageArray[Math.floor(Math.random()*imageArray.length)];\n\n        // Set state to the random image \n        setUnsplashResult(randomImage.urls.regular);\n\n        // Do not display front end error message\n        setApiErr(false);\n      })\n      .catch((err) => {\n\n         // Display front end error message\n        setApiErr(true);\n        console.log(`Unsplash Error: ${err}`);\n      });\n\n    // Open Weather API \n    const openWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue.current.value}&appid=${process.env.REACT_APP_OW_KEY}&units=imperial`;\n\n    axios.get(openWeatherUrl)\n      .then((res) => {\n\n        // Sets Weather Data\n        setOpenWeatherResults({\n          name: res.data.name,\n          icon: res.data.weather[0].icon,\n          description: res.data.weather[0].description,\n          date: timeConverter(res.data.dt),\n          temperature: Math.floor(res.data.main.temp),\n          maxTemperature: Math.floor(res.data.main.temp_max),\n          minTemperature: Math.floor(res.data.main.temp_min),\n          humidity: Math.floor(res.data.main.humidity),\n          windSpeed: Math.floor(res.data.wind.speed),\n          latitude: res.data.coord.lat,\n          longitude: res.data.coord.lon,\n\n        })\n\n        // Do not display front end error message\n        setApiErr(false);\n\n        // Lets JSX know to display elements\n        setDisplayCurrentForecast(true);\n\n        // Turns off welcome message\n        setPreContent(false);\n\n      })\n      .catch((err) => {\n\n         // Display front end error message\n        setApiErr(true);\n        console.log(`Open Weather Error: ${err}`);\n      });\n\n\n    // 5 Day Forcast Weather API \n    const openWeatherForecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${searchValue.current.value}&appid=${process.env.REACT_APP_OW_KEY}&units=imperial`;\n\n    axios.get(openWeatherForecastUrl)\n      .then((res) => {\n        let futureForecastArray = res.data.list;\n\n        // Submits data to a helper function so that we can pull out only five objects and create JSX cards out of them.\n        processForecast(futureForecastArray)\n\n        // Do not display front end error message\n        setApiErr(false);\n\n      })\n      .catch((err) => {\n\n        // Display front end error message\n        setApiErr(true);\n        console.log(`Open Weather Error: ${err}`);\n      });\n\n  }\n\n  // END API Calls ---------------------------------------|\n\n\n\n  return (\n    <>\n      <main className=\"columns is-desktop g__main-wrapper\">\n        <section className=\"column g__sidebar-container\">\n          <SidebarWrapper>\n            {/* Below is a future feature */}\n            {/* <LocationHistory /> */}\n          </SidebarWrapper>\n\n        </section>\n        <section className=\"column g__results-container container\">\n          <SearchBar\n            searchValue={searchValue}\n            submitSearch={submitSearch}\n          />\n\n          {!apiErr ? (null) : <SearchErrorMessage />}\n\n          {/* Welcome message */}\n          {!preContent ? (null) : <PreContentMessage />}\n\n          <CurrentTemp\n            unsplashResult={unsplashResult}\n            displayCurrentForecast={displayCurrentForecast}\n            openWeatherResults={openWeatherResults}\n          />\n          \n          {displayFutureForecast ? <h4>5 Day Forecast</h4> : null}\n          <div className=\"columns forecast__main\">\n            {/* This generates 5 forecast cards */}\n            {futureForecast}\n          </div>\n\n       \n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}